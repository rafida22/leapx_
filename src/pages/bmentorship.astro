---
import '/src/styles/global.css'
import Bheader from "../components/Bheader.astro";
---
 <!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://cdn.tailwindcss.com"></script>

  <!-- Font Awesome 6 Free (solid icons) -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    integrity="sha512-a/NIWgdSTtr6WrxO…=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
</head>
 <body data-startup-id="bio-aryvedic" class=" border border-gray-300 px-6 py-4">
 <div class="mt-5 flex items-center justify-between border border-gray-300 rounded-xl px-6 py-4 shadow-sm bg-white">
  <!-- Left side: Back arrow + startup info -->
  <div class="flex items-center gap-4">
    <!-- Back arrow -->
    <button><a href="./leapx" class="text-2xl text-gray-700 hover:text-black">
      &#8592;</a>
    </button>

    <!-- Title + subtitle -->
    <div>
      <h2 class="font-bold text-xl">Bioaryvedic</h2>
      <p class="text-sm text-gray-600">AI-Powered Workflow Automation</p>
    </div>
  </div>

  <!-- Right side: Save Changes button -->
  <button id="saveBmentorship"class="flex items-center gap-2 bg-violet-500 hover:bg-violet-600 text-white text-sm font-medium py-2 px-4 rounded-md shadow">
    <!-- Save icon -->
    <svg class="w-4 h-4" fill="white" viewBox="0 0 24 24">
      <path d="M17 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V7l-4-4zm0 16H5V5h11.17L19 7.83V19zm-5-2a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm-4-8h8v2H8V9z"/>
    </svg>
    Save Changes
  </button>
</div>
<br>
 <p class="text-sm">Dashboard > Bioaryvedic > Action plan</p>
 <Bheader/>
  <!-- ─────────────────────────  MENTORSHIP COMMENTS  ───────────────────────── -->
<section class="mt-5 border border-gray-300 rounded-lg bg-white shadow-sm p-6 max-w-full mx-auto">
  <!-- header row -->
 <div class="flex justify-between items-center mb-4">
    <div class="flex items-center gap-4">
      <h2 class=" flex items-centertext-xl font-semibold text-gray-800">Mentorship Comments</h2>
      <!-- 🔹 new button -->
      <button id="addMeetingBtn"
              class="bg-violet-500 hover:bg-violet-600 text-white text-sm
                     font-medium px-3 py-1.5 rounded-md shadow">
        + Add New Meeting or Comments
      </button>
    </div>
  </div>
    <!-- all meetings live here -->
  <div id="meetingList" class="space-y-8">

    <!-- ───── initial meeting block (your original markup) ───── -->
   
  </div><!-- /meetingList -->
  <!-- session meta -->
 

  </div>
</section>
<!-- ════ A.  SELECT-MEETING MODAL ════ -->
<div id="meetModal"
     class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
  
     <div class="bg-white w-full max-w-md rounded-lg p-6 relative">
    <button id="closeMeetModal" class="absolute top-2 right-3 text-2xl">&times;</button>
    <h2 class="text-lg font-semibold mb-4">Choose a Meeting</h2>

    <div id="meetList" class="space-y-3 max-h-80 overflow-y-auto">
        <button id="newMeetRow"
          class="w-full flex items-center gap-2 border px-3 py-2 rounded
                 hover:bg-gray-100">
    <i class="fas fa-plus text-violet-600"></i>
    <span class="font-medium">Create a New Meeting</span>
  </button>
  <div id="newMeetForm" class="hidden mt-3 flex gap-2">
    <input id="newMeetInput" type="text" placeholder="Meeting topic"
           class="flex-1 border rounded px-3 py-2" />
    <button id="newMeetAdd"
            class="bg-violet-600 hover:bg-violet-700 text-white px-3 py-2 rounded">
      Add
    </button>
    <button id="newMeetCancel"
            class="border px-3 py-2 rounded">
      Cancel
    </button>
  </div><!-- rows generated by JS -->
    </div>
  </div>
</div>

<!-- ════ B.  ADD-COMMENT MODAL ════ -->
<div id="commentModal"
     class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
  <div class="bg-white w-full max-w-md rounded-lg p-6 relative">
    <button id="closeCommentModal" class="absolute top-2 right-3 text-2xl">&times;</button>
    <h2 id="commentModalTitle" class="text-lg font-semibold mb-4">Add Comment</h2>

    <form id="commentForm" class="space-y-4">
      <!-- type -->
      <div>
        <label class="block text-sm font-medium mb-1">Type</label>
        <select id="commentType" class="w-full border rounded px-3 py-2">
          <option value="Expert">Expert Comment</option>
          <option value="Startup">Startup Response</option>
        </select>
      </div>

      <!-- text -->
      <div>
        <label class="block text-sm font-medium mb-1">Text</label>
        <textarea id="commentText" rows="3"
                  class="w-full border rounded px-3 py-2" required></textarea>
      </div>

      <div class="flex justify-end gap-3 pt-2">
        <button type="button" id="cancelComment" class="px-4 py-2 border rounded">Cancel</button>
        <button type="submit"
                class="px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded">
          Add
        </button>
      </div>
    </form>
  </div>
</div>
<!-- Modals -->
  <div id="deleteModal" class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-md shadow-md p-6 w-full max-w-sm text-center relative">
      <p class="mb-4 text-gray-800 font-medium">Are you sure you want to delete this item?</p>
      <div class="flex justify-center gap-4">
        <button id="cancelDeleteBtn" class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-100">Cancel</button>
        <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete</button>
      </div>
    </div>
  </div>

  <div id="editModal" class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-md shadow-md p-6 w-full max-w-sm text-center relative">
      <h2 class="text-lg font-semibold mb-4">Edit Comment</h2>
      <textarea id="editCommentText" class="w-full p-2 border rounded text-sm" rows="4"></textarea>
      <div class="flex justify-center gap-4 mt-4">
        <button id="cancelEditBtn" class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-100">Cancel</button>
        <button id="confirmEditBtn" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save</button>
      </div>
    </div>
  </div>
<!-- Toast Notification -->
  <div id="mentorToast" class="fixed bottom-6 right-6 bg-white text-gray-800 shadow-lg border border-gray-300 px-4 py-3 rounded-lg hidden z-50 transition-all duration-300">
    Mentorship notes saved successfully!
  </div>
<!-- ───────────  JS  ─────────── -->
<script>
  const addBtn   = document.getElementById('newMeetAdd');
  const list     = document.getElementById('commentList');
  let nextType   = 'Expert';   // alternates on every click

  const meetingListDiv = document.getElementById('meetingList');
  const addMeetingBtn  = document.getElementById('addMeetingBtn');

  const meetModal   = document.getElementById('meetModal');
  const meetList    = document.getElementById('meetList');
  const closeMeet   = document.getElementById('closeMeetModal');
  const newMeetRow  = document.getElementById('newMeetRow');

  const comModal    = document.getElementById('commentModal');
  const closeCom    = document.getElementById('closeCommentModal');
  const cancelCom   = document.getElementById('cancelComment');
  const comForm     = document.getElementById('commentForm');
  const comType     = document.getElementById('commentType');
  const comText     = document.getElementById('commentText');
  const titleEl     = document.getElementById('commentModalTitle');
  let targetCommentList = null;

  const deleteModal = document.getElementById('deleteModal');
  const confirmDelete = document.getElementById('confirmDeleteBtn');
  const cancelDelete = document.getElementById('cancelDeleteBtn');
  const editModal = document.getElementById('editModal');
  const editTextarea = document.getElementById('editCommentText');
  const confirmEdit = document.getElementById('confirmEditBtn');
  const cancelEdit = document.getElementById('cancelEditBtn');
  let toDelete = null;
  let toEdit = null;
  
  function getStartupKey(name) {
  const id = document.body.dataset.startupId || 'default';
  return `${name}_${id}`;
}
  function buildCard(type, text) {
    const wrap = document.createElement('div');
    wrap.className = `rounded-md p-4 ${type === 'Expert' ? 'bg-indigo-100 text-indigo-900' : 'bg-green-100 text-green-900'} relative group`;
    wrap.innerHTML = `
      <p class="font-semibold">${type} ${type === 'Expert' ? 'Comment' : 'Response'}</p>
      <p>${text}</p>
      <div class="absolute top-2 right-3 hidden group-hover:flex gap-3 text-gray-600">
        <button title="Edit" onclick="editComment(this)"><i class="fas fa-pen"></i></button>
        <button title="Delete" onclick="deleteComment(this)"><i class="fas fa-trash"></i></button>
      </div>`;
    return wrap;
  }

 function createMeeting(topic) {
  const today = new Date().toLocaleDateString('en-US', { year:'numeric', month:'long', day:'2-digit' });
  const section = document.createElement('section');
  section.className = 'meeting';
  section.innerHTML = `
    <div class="flex justify-between items-center font-medium mb-3">
      <span class="topic">${topic}</span>
      <div class="flex items-center gap-3">
        <span class="date text-sm text-gray-600">${today}</span>
        <button title="Delete Meeting" onclick="deleteMeeting(this)"><i class="fas fa-trash text-red-600"></i></button>
      </div>
    </div>
    <div class="commentList space-y-3"></div>
  `;
  meetingListDiv.appendChild(section);
  return section.querySelector('.commentList');
}


  addMeetingBtn.addEventListener('click', () => {
    meetList.querySelectorAll('.dynRow').forEach(el => el.remove());
    meetingListDiv.querySelectorAll('.meeting').forEach(sec => {
      const topic = sec.querySelector('.topic').textContent.trim();
      const date = sec.querySelector('.date').textContent.trim();
      const btn = document.createElement('button');
      btn.className = 'dynRow w-full text-left border px-3 py-2 rounded hover:bg-gray-100';
      btn.innerHTML = `<div class="font-medium">${topic}</div><div class="text-xs text-gray-600">${date}</div>`;
      btn.addEventListener('click', () => {
        targetCommentList = sec.querySelector('.commentList');
        meetModal.classList.add('hidden');
        comModal.classList.remove('hidden');
        titleEl.textContent = `Add comment to: ${topic}`;
      });
      meetList.appendChild(btn);
    });
    meetModal.classList.remove('hidden');
  });

  closeMeet.addEventListener('click', () => meetModal.classList.add('hidden'));

  const formWrap = document.getElementById('newMeetForm');
  const inputField = document.getElementById('newMeetInput');
  const addBtnForm = document.getElementById('newMeetAdd');
  const cancelBtn = document.getElementById('newMeetCancel');

  newMeetRow.addEventListener('click', () => {
    newMeetRow.classList.add('hidden');
    formWrap.classList.remove('hidden');
    inputField.focus();
  });

  cancelBtn.addEventListener('click', () => {
    formWrap.classList.add('hidden');
    newMeetRow.classList.remove('hidden');
    inputField.value = '';
  });

  addBtnForm.addEventListener('click', () => {
    const topic = inputField.value.trim();
    if (!topic) return;
    targetCommentList = createMeeting(topic);
    formWrap.classList.add('hidden');
    newMeetRow.classList.remove('hidden');
    inputField.value = '';
    meetModal.classList.add('hidden');
    comModal.classList.remove('hidden');
    titleEl.textContent = `Add comment to: ${topic}`;
  });

  comForm.addEventListener('submit', e => {
    e.preventDefault();
    if (!targetCommentList) return;
    const text = comText.value.trim();
    const type = comType.value;
    if (!text) return;
    targetCommentList.appendChild(buildCard(type, text));
    comModal.classList.add('hidden');
    comForm.reset();
  });

  [closeCom, cancelCom].forEach(btn => btn.addEventListener('click', () => comModal.classList.add('hidden')));

  meetingListDiv.addEventListener('click', e => {
    const btn = e.target.closest('.addComment');
    if (!btn) return;
    targetCommentList = btn.previousElementSibling;
    const typeChoice = prompt('Type "E" for Expert or "S" for Startup:', 'E').toUpperCase();
    const type = typeChoice === 'S' ? 'Startup' : 'Expert';
    const text = prompt(`Enter ${type === 'Expert' ? 'expert comment' : 'startup response'}:`);
    if (!text) return;
    targetCommentList.appendChild(buildCard(type, text.trim()));
  });

  function saveToLocalStorage() {
    const allMeetings = document.querySelectorAll('.meeting');
    const data = [...allMeetings].map(meeting => {
      const topic = meeting.querySelector('.topic').textContent;
      const date = meeting.querySelector('.date').textContent;
      const comments = [...meeting.querySelectorAll('.commentList > div')].map(c => ({
        type: c.querySelector('p.font-semibold').textContent.includes('Expert') ? 'Expert' : 'Startup',
        text: c.querySelectorAll('p')[1].textContent
      }));
      return { topic, date, comments };
    });
    localStorage.setItem(getStartupKey('Mentorship'), JSON.stringify(data));
    const toast = document.getElementById('mentorToast');
    toast.classList.remove('hidden');
    setTimeout(() => toast.classList.add('hidden'), 2000);
  }

  function loadFromLocalStorage() {
    const saved = JSON.parse(localStorage.getItem(getStartupKey('Mentorship')) || '[]');
    saved.forEach(m => {
      const commentList = createMeeting(m.topic);
      m.comments.forEach(c => {
        const card = buildCard(c.type, c.text);
        commentList.appendChild(card);
      });
    });
  }

  window.editComment = function (btn) {
    const para = btn.closest('.relative').querySelectorAll('p')[1];
    toEdit = para;
    editTextarea.value = para.textContent;
    editModal.classList.remove('hidden');
  }

  window.deleteComment = function (btn) {
    toDelete = btn.closest('.relative');
    deleteModal.classList.remove('hidden');
  }

  window.deleteMeeting = function (btn) {
    toDelete = btn.closest('.meeting');
    deleteModal.classList.remove('hidden');
  }

  confirmDelete.addEventListener('click', () => {
    if (toDelete) toDelete.remove();
    deleteModal.classList.add('hidden');
  });

  cancelDelete.addEventListener('click', () => {
    deleteModal.classList.add('hidden');
    toDelete = null;
  });

  confirmEdit.addEventListener('click', () => {
    if (toEdit) toEdit.textContent = editTextarea.value;
    editModal.classList.add('hidden');
    toEdit = null;
  });

  cancelEdit.addEventListener('click', () => {
    editModal.classList.add('hidden');
    toEdit = null;
  });

  const saveBtn = document.getElementById('saveBmentorship');
  saveBtn?.addEventListener('click', saveToLocalStorage);
  window.addEventListener('DOMContentLoaded', loadFromLocalStorage);
</script>


</body>
</html>