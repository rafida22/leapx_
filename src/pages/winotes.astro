---
import './src/styles/global.css'
import Wheader from "../components/Wheader.astro";
---
 <!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://cdn.tailwindcss.com"></script>

  <!-- Font Awesome 6 Free (solid icons) -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    integrity="sha512-a/NIWgdSTtr6WrxO…=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
</head>
 <body data-startup-id="wizard-flair" class=" border border-gray-300 px-6 py-4">
 <div class="mt-5 flex items-center justify-between border border-gray-300 rounded-xl px-6 py-4 shadow-sm bg-white">
  <!-- Left side: Back arrow + startup info -->
  <div class="flex items-center gap-4">
    <!-- Back arrow -->
    <button><a href="./leapx" class="text-2xl text-gray-700 hover:text-black">
      &#8592;</a>
    </button>

    <!-- Title + subtitle -->
    <div>
      <h2 class="font-bold text-xl">Wizard Flair</h2>
      <p class="text-sm text-gray-600">AI-Powered Workflow Automation</p>
    </div>
  </div>

  <!-- Right side: Save Changes button -->
  <button id="saveWinotes"class="flex items-center gap-2 bg-violet-500 hover:bg-violet-600 text-white text-sm font-medium py-2 px-4 rounded-md shadow">
    <!-- Save icon -->
    <svg class="w-4 h-4" fill="white" viewBox="0 0 24 24">
      <path d="M17 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V7l-4-4zm0 16H5V5h11.17L19 7.83V19zm-5-2a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm-4-8h8v2H8V9z"/>
    </svg>
    Save Changes
  </button>
</div>
<br>
 <p class="text-sm">Dashboard > Wizard Flair > Internal Notes</p>
 <Wheader/>
 <!-- ─────────────────────────  INTERNAL COMMENTS  ───────────────────────── -->
<section class="bg-white mt-5 border border-gray-300  rounded-lg p-6 max-w-full mx-auto shadow-sm">
  <!-- Header -->
  <div class="flex justify-between items-center mb-4">
    <div>
      <h2 class="text-xl font-semibold text-gray-800">Internal Comments</h2>
      <p class="text-sm text-gray-500">Internal Notes & Observations</p>
    </div>
    <button id="addInternalBtn"
            class="bg-violet-500 hover:bg-violet-600 text-white text-sm font-medium px-4 py-2 rounded-md shadow">
      + Add Comment
    </button>
  </div>

  <!-- Comment List -->
  <div id="internalCommentList" class="space-y-4">

    <!-- Initial Comment -->
    
    
  </div>
</section>
<!-- ═══════ Internal-Note Modal ═══════ -->
<div id="noteModal"
     class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
  <div class="bg-white w-full max-w-md rounded-lg p-6 relative">
    <button id="closeNoteModal" class="absolute top-2 right-3 text-2xl">&times;</button>
    <h2 class="text-lg font-semibold mb-4">Add Internal Note</h2>

    <form id="noteForm" class="space-y-4">
      <div>
        <label for="noteText" class="block text-sm font-medium mb-1">Note text</label>
        <textarea id="noteText" rows="4"
                  class="w-full border rounded px-3 py-2" required></textarea>
      </div>

      <!-- optional: category / tag
      <div>
        <label class="block text-sm font-medium mb-1">Category</label>
        <input id="noteTag" type="text"
               class="w-full border rounded px-3 py-2">
      </div> -->

      <div class="flex justify-end gap-3 pt-2">
        <button type="button" id="cancelNote"
                class="px-4 py-2 border rounded">Cancel</button>
        <button type="submit"
                class="px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded">
          Add
        </button>
      </div>
    </form>
  </div>
</div>
<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black/40 hidden flex items-center justify-center z-50">
  <div class="bg-white rounded-md shadow-md p-6 w-full max-w-sm text-center relative">
    <p class="mb-4 text-gray-800 font-medium">Are you sure you want to delete this note?</p>
    <div class="flex justify-center gap-4">
      <button id="cancelDeleteBtn" class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-100">Cancel</button>
      <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete</button>
    </div>
  </div>
</div>

<!-- Edit Note Modal -->
<div id="editModal" class="fixed inset-0 bg-black/40 hidden items-center justify-center z-50">
  <div class="bg-white rounded-md shadow-md p-6 w-full max-w-sm text-center relative">
    <h2 class="text-lg font-semibold mb-4">Edit Note</h2>
    <textarea id="editNoteText" class="w-full p-2 border rounded text-sm" rows="4"></textarea>
    <div class="flex justify-center gap-4 mt-4">
      <button id="cancelEditBtn" class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-100">Cancel</button>
      <button id="confirmEditBtn" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save</button>
    </div>
  </div>
</div>



<!-- JS -->
<!-- Toast Notification -->
<div id="noteToast" class="fixed bottom-6 right-6 bg-white text-gray-800 shadow-lg border border-gray-300 px-4 py-3 rounded-lg hidden z-50 transition-all duration-300">
   Notes saved successfully!
</div>

<script>
  const list = document.getElementById("internalCommentList");
  const btn = document.getElementById("addInternalBtn");

  const noteModal  = document.getElementById('noteModal');
  const openNote   = document.getElementById('addInternalBtn');
  const closeNote  = document.getElementById('closeNoteModal');
  const cancelNote = document.getElementById('cancelNote');
  const noteForm   = document.getElementById('noteForm');
  const noteText   = document.getElementById('noteText');
  const noteList   = document.getElementById('internalCommentList');

  const deleteModal = document.getElementById('deleteModal');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
  const saveBtn = document.querySelector('.bg-violet-500'); // Save button
  const toast = document.getElementById('noteToast');

  const editModal = document.getElementById('editModal');
  const editNoteText = document.getElementById('editNoteText');
  const cancelEditBtn = document.getElementById('cancelEditBtn');
  const confirmEditBtn = document.getElementById('confirmEditBtn');

  let targetToDelete = null;
  let targetToEdit = null;

  
  window.deleteNote = function (btn) {
    targetToDelete = btn.closest("div.relative");
    deleteModal.classList.remove('hidden');
    deleteModal.classList.add('flex');
  };

  window.editNote = function (btn) {
    targetToEdit = btn.closest("div.relative").querySelector("p.mt-1");
    editNoteText.value = targetToEdit.textContent;
    editModal.classList.remove('hidden');
    editModal.classList.add('flex');
  };

  openNote.addEventListener('click', () => {
    noteForm.reset();
    noteModal.classList.remove('hidden');
    noteText.focus();
  });

  [closeNote, cancelNote].forEach(btn =>
    btn.addEventListener('click', () => noteModal.classList.add('hidden'))
  );

  cancelDeleteBtn.addEventListener('click', () => {
    targetToDelete = null;
    deleteModal.classList.add('hidden');
    deleteModal.classList.remove('flex');
  });

  function getStartupKey(name) {
  const id = document.body.dataset.startupId || 'default';
  return `${name}_${id}`;
}

  confirmDeleteBtn.addEventListener('click', () => {
    if (targetToDelete) {
      targetToDelete.remove();
      targetToDelete = null;
    }
    deleteModal.classList.add('hidden');
    deleteModal.classList.remove('flex');
  });

  cancelEditBtn.addEventListener('click', () => {
    editModal.classList.add('hidden');
    editModal.classList.remove('flex');
    targetToEdit = null;
  });

  confirmEditBtn.addEventListener('click', () => {
    const newText = editNoteText.value.trim();
    if (newText && targetToEdit) {
      targetToEdit.textContent = newText;
    }
    editModal.classList.add('hidden');
    editModal.classList.remove('flex');
    targetToEdit = null;
  });

  function buildNote(text, date = null) {
    const wrap = document.createElement('div');
    wrap.className = 'border-t pt-3 relative group rounded-md shadow-sm bg-white p-3';

    const stamp = date || new Date().toLocaleDateString('en-US', {
      year: 'numeric', month: 'long', day: '2-digit'
    });

    wrap.innerHTML = `
      <p class="text-sm text-gray-500">${stamp}</p>
      <p class="mt-1 font-medium text-gray-800">${text}</p>
      <div class="absolute top-3 right-3 hidden group-hover:flex gap-3 text-gray-600">
        <button onclick="editNote(this)" title="Edit"><i class="fas fa-pen"></i></button>
        <button onclick="deleteNote(this)" title="Delete"><i class="fas fa-trash"></i></button>
      </div>
    `;

    return wrap;
  }

  noteForm.addEventListener('submit', e => {
    e.preventDefault();
    const txt = noteText.value.trim();
    if (!txt) return;
    noteList.appendChild(buildNote(txt));
    noteModal.classList.add('hidden');
  });

  // Save Notes to LocalStorage
  document.getElementById('saveWinotes')?.addEventListener('click', () => {
    const notes = [];
    [...noteList.children].forEach(div => {
      const date = div.querySelector('p.text-sm')?.textContent;
      const text = div.querySelector('p.mt-1')?.textContent;
      if (text) notes.push({ text, date });
    });
    localStorage.setItem(getStartupKey('internalNotes'), JSON.stringify(notes));

    // Toast
    toast.classList.remove('hidden');
    setTimeout(() => toast.classList.add('hidden'), 2000);
  });

  // Load Notes on page load
  window.addEventListener('DOMContentLoaded', () => {
    const saved = JSON.parse(localStorage.getItem(getStartupKey('internalNotes'))|| '[]');
    saved.forEach(note => {
      noteList.appendChild(buildNote(note.text, note.date));
    });
  });
</script>


</body>
</html>